------------mkdir/ touch - make directory--------------
cd - go to directory
cd.. - go back 
dir - see the files
. - selects all
:wq - exit commit editor

git init - new repo
git clone - clone repo
git add <filename> - add file
git all . add all files
git commit -m"message" - commit changes and message
git commit -a -m"message" -  adds everything
git push -  push changes to master
git pull - pull the latest changes to current branch
git merge <branchname>

git remote add origin <other repo>
git push --all origin
git checkout master- switches branches or master
git checkout -b <branchname> - creates new branch 
git push --set-upstream origin new-ideas - pushes a new branch to repo

git add . && git commit -m'test' && git push
git commit -am 'test' && git push

git ls-files - views the files
git status - shows the status
git log - shows the commit history
git branch - shows the branches
git branch -d - delete the branch name
confirm pull request and allow merge to master on github

-------------Change git acc---------------------
git config --global credential.helper wincred
go on windows creditials manager delete key
then relogin

-------------Change git acc when pushing---------------------
git config --global user.name "Bob"
git config --global user.email "Bob@example.com"

----------------.gitignore file (ignore any folders in it e.g. node_modules)-----
test.txt - file
/dir1 - folder
*.txt - all txt files

gh-pages deploy

------------git branch-------------------
git branch test - create branch called test
git checkout test - switch to test branch
(add / commit branch)
git checkout master - swtich to master branch
git merge test - merge branch with master to push
-------------delete branch---------
$ git branch -d branch_name

---------Create a new repository on the command line---------
echo "# slate-skeleton-theme" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/WayneLuong/slate-skeleton-theme.git
git push -u origin master

----------Push an existing repository from the command line------------
git remote add origin https://github.com/WayneLuong/slate-skeleton-theme.git
git push -u origin master

----------Set up SSH------------
create SSH:
ssh-keygen -t rsa -C "admin@example.com"
view key (where id_rsa is key name - can be changed):
cat ~/.ssh/id_rsa.pub
PASTE KEY TO GIT PAGE

----------Set up Multiple SSH accs------------
RENAME THE DEFAULT PATH
Enter file in which to save the key (/Users/name/.ssh/id_rsa): /Users/name/.ssh/id_rsa_personal
ssh-add ~/.ssh/id_rsa_personal
CREAT CONFIG FILE
touch config
PASTE INTO IT: 
# Main account, - the default config
Host github.com
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa
   
# Personal account-1
Host github.com-work_user1    
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa_personal
   
PUSHING FILES (gitaddname changed to same as config file unless default):
git remote add origin git@github.com:gitaccname/my-new-project.git
git push -u -f origin master 

CHECK SSH KEYS:
cd ~/.ssh
ls
ls -la

DELETE SSH:
rm -f ~/.ssh/id_rsa

----------Fixing bad commits------------ (commit hash)
FIX LAST COMMIT MESSAGE:
git commit --amend -m 'new message'

COMMIT TO DIFFERENT BRANCH:
git log (to get the hash)
git checkout example.js or git checkout sc34214 or git checkout branchname - (to correct branch)
git cherry-pick sda23141 - paste the correct hash from other branch

DELETE THE WRONG COMMIT (RESET TO A HASH)
git checkout example.js or git checkout sc34214 or git checkout branchname - (to correct branch)
git reset --mixed sd341513 or git reset sd213124 - default only in the local directory
git reset --soft sd341513  - resetted files are still committed
git reset --hard sd341513  - resetted files completely reverted

REMOVE UNTRACKED FILES
git clean -df - gets rid of any untracked files/directories

----------Fixing bad commits reverts------------

REVERT RESETS
git reflog - check commit history including resets 

GET THE HASH FOR THE RESET
git checkout sd21441 the hash (this will be a detached head)
git branch backup (create a new branch which will serve as backup, reverted will be at backup branch)
OPTIONAL MERGE BACK INTO BRANCH
git checkout master
git merge feature-branch-name

REVERT A COMMIT (revert this hash)
git revert sd21314

----------Work flow------------

git branch dev
git checkout dev
git add . && git commit -m 'hotfix
git push --set-upstream origin dev
git checkout master
git merge dev
git push
git branch -d dev DELETE LOCAL BRANCH
git push origin --delete dev DELETE REMOTE BRANCH
git pull origin master PULL MASTER CHANGES

----------merge messages -----------
press "i" (i for insert)
write your merge message
press "esc" (escape)
write ":wq" (write & quit)
then press enter
